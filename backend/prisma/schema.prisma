// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Usuario {
  id    Int    @id @default(autoincrement())
  email String @unique
  senha String
  nome  String
  papel String

  @@map("usuario")
}

model Lotacao {
  codigo String @id @unique
  nome   String

  funcionarios Funcionario[]

  @@map("lotacoes")
}

model Funcionario {
  id            Int      @id @default(autoincrement())
  nome          String
  sobrenome     String
  cargo         String
  cpf           String   @unique 
  data_admissao DateTime
  matricula     Int      @unique

  empregador     Empregador @relation(fields: [empregadorCnpj], references: [cnpj])
  empregadorCnpj String     @map("empregador_cnpj")

  lotacao       Lotacao @relation(fields: [lotacaoCodigo], references: [codigo])
  lotacaoCodigo String  @map("lotacao_codigo")

  recibos ReciboPagamento[]

  @@map("funcionario")
}

model ReciboPagamento {
  funcionarioCpf String      @map("funcionario_cpf")
  funcionario    Funcionario @relation(fields: [funcionarioCpf], references: [cpf])

  empregadorCnpj String     @map("empregador_cnpj")
  empregador     Empregador @relation(fields: [empregadorCnpj], references: [cnpj])

  competencia String // Ex: "2025-07"

  itens ItemRecibo[]

  // Define uma chave primária composta
  @@id([funcionarioCpf, empregadorCnpj, competencia])
  @@map("recibos_pagamento")
}

model Verba {
  codigo    String @id @unique
  descricao String

  itensRecibo ItemRecibo[]

  referenciaPai       Verba?  @relation("ReferenciasVerba", fields: [referenciaPaiCodigo], references: [codigo])
  referenciaPaiCodigo String? @map("referencia_pai_codigo")
  referenciasFilhas   Verba[] @relation("ReferenciasVerba")

  @@map("verbas")
}

model ItemRecibo {
  reciboFuncionarioCpf String @map("recibo_funcionario_cpf")
  reciboEmpregadorCnpj String @map("recibo_empregador_cnpj")
  reciboCompetencia    String @map("recibo_competencia")

  recibo ReciboPagamento @relation(fields: [reciboFuncionarioCpf, reciboEmpregadorCnpj, reciboCompetencia], references: [funcionarioCpf, empregadorCnpj, competencia], onDelete: Cascade)

  verbaCodigo String @map("verba_codigo")
  verba       Verba  @relation(fields: [verbaCodigo], references: [codigo])

  valorProvento Decimal? @map("valor_provento")
  valorDesconto Decimal? @map("valor_desconto")

  @@id([reciboFuncionarioCpf, reciboEmpregadorCnpj, reciboCompetencia, verbaCodigo])
  @@map("itens_recibo")
}

model Empregador {
  cnpj         String @id @unique 
  razao_social String

  funcionarios    Funcionario[]
  recibosEmitidos ReciboPagamento[]

  @@map("empregador")
}

// model Lotacao {
//   codigo Int     @id @default(autoincrement())
//   nome   String

//   // Relacionamento com FuncionarioLotacao
//   funcionarios FuncionarioLotacao[]

//   // Relacionamento com Usuario (controle de lotações)
//   usuarios     LotacaoUsuario[]
// }
